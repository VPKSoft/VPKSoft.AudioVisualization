<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAA//////////////HH///hh///4Q///+Af///gP///4D///+A////gH//x
        4A//8eEP//Hhh//x44//8B////AP///wB///8cf///GH//jwD//wcA//8HA///B////iP///4j///+I/
        ///HH///xx///8cP//+PD///z5////////8=
</value>
  </data>
</root>